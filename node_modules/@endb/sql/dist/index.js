"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const sql_ts_1 = require("sql-ts");
class EndbSql extends events_1.EventEmitter {
    constructor(options) {
        super();
        this.options = {
            table: 'endb', keySize: 255, ...options
        };
        const db = new sql_ts_1.Sql(this.options.dialect);
        this.db = db.define({
            name: this.options.table,
            columns: [
                {
                    name: 'key',
                    primaryKey: true,
                    dataType: `VARCHAR(${Number(this.options.keySize)})`,
                },
                {
                    name: 'value',
                    dataType: 'TEXT',
                },
            ],
        });
        const connected = options
            .connect()
            .then(async (query) => {
            const createTable = this.db.create().ifNotExists().toString();
            await query(createTable);
            return query;
        })
            .catch((error) => {
            this.emit('error', error);
        });
        this.query = async (sqlString) => {
            const query = await connected;
            if (query)
                return query(sqlString);
        };
    }
    async all() {
        const select = this.db
            .select('*')
            .where(this.db.key.like(`${this.namespace}:%`))
            .toString();
        const rows = await this.query(select);
        return rows;
    }
    async clear() {
        const del = this.db
            .delete()
            .where(this.db.key.like(`${this.namespace}:%`))
            .toString();
        await this.query(del);
    }
    async delete(key) {
        const select = this.db.select().where({ key }).toString();
        const del = this.db.delete().where({ key }).toString();
        const [row] = await this.query(select);
        if (row === undefined)
            return false;
        await this.query(del);
        return true;
    }
    async get(key) {
        const select = this.db.select().where({ key }).toString();
        const [row] = await this.query(select);
        if (row === undefined)
            return undefined;
        return row.value;
    }
    async has(key) {
        const select = this.db.select().where({ key }).toString();
        const [row] = await this.query(select);
        return Boolean(row);
    }
    async set(key, value) {
        let upsert;
        if (this.options.dialect === 'mysql') {
            value = value.replace(/\\/g, '\\\\');
        }
        if (this.options.dialect === 'postgres') {
            upsert = this.db
                .insert({ key, value })
                .onConflict({
                columns: ['key'],
                update: ['value'],
            })
                .toString();
        }
        else {
            upsert = this.db.replace({ key, value }).toString();
        }
        return this.query(upsert);
    }
}
exports.default = EndbSql;
