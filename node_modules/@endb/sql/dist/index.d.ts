/// <reference types="node" />
import { Element, EndbAdapter } from 'endb';
import { EventEmitter } from 'events';
import { SQLDialects } from 'sql-ts/dist/configTypes';
import { TableWithColumns } from 'sql-ts/dist/table';
export interface EndbSqlOptions {
    dialect: SQLDialects;
    connect(): Promise<(sqlString: string) => Promise<unknown>>;
    table?: string;
    keySize?: number;
}
export default abstract class EndbSql<TVal> extends EventEmitter implements EndbAdapter<TVal> {
    namespace: string;
    protected readonly options: Required<EndbSqlOptions>;
    protected readonly db: TableWithColumns<Element<string>>;
    protected readonly query: (sqlString: string) => Promise<any>;
    constructor(options: EndbSqlOptions);
    all(): Promise<Element<string>[]>;
    clear(): Promise<void>;
    delete(key: string): Promise<boolean>;
    get(key: string): Promise<void | string>;
    has(key: string): Promise<boolean>;
    set(key: string, value: string): Promise<unknown>;
}
