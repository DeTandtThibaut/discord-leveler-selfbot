/// <reference types="node" />
import { AddColumnNode, BinaryNode, CascadeNode, DefaultNode, DropColumnNode, ForShareNode, ForUpdateNode, FunctionCallNode, IndexesNode, OnConflictNode, OnDuplicateNode, OrIgnoreNode, RenameColumnNode, ReplaceNode, RestrictNode, ReturningNode, TruncateNode } from '../node';
import { Postgres } from './postgres';
export declare class Sqlite extends Postgres {
    config: {
        dateTimeMillis?: boolean;
    };
    protected myClass: typeof Sqlite;
    protected arrayAggFunctionName: string;
    protected hasAddedAColumn: boolean;
    constructor(config: {
        dateTimeMillis?: boolean;
    });
    _getParameterValue(value: null | boolean | number | string | any[] | Date | Buffer | object, quoteChar?: string): string | number;
    visitReplace(replaceNode: ReplaceNode): string[];
    visitDefault(defaultNode: DefaultNode): string[];
    visitDropColumn(dropColumnNode: DropColumnNode): string[];
    visitFunctionCall(functionCallNode: FunctionCallNode): string[];
    visitTruncate(truncateNode: TruncateNode): string[];
    visitRenameColumn(renameColumnNode: RenameColumnNode): string[];
    visitOnDuplicate(onDuplicateNode: OnDuplicateNode): string[];
    visitOnConflict(onConflictNode: OnConflictNode): string[];
    visitReturning(returningNode: ReturningNode): string[];
    visitForUpdate(forUpdateNode: ForUpdateNode): string[];
    visitForShare(forShareNode: ForShareNode): string[];
    visitAddColumn(addColumnNode: AddColumnNode): string[];
    visitIndexes(indexesNode: IndexesNode): string[];
    visitCascade(cascadeNode: CascadeNode): string[];
    visitRestrict(restrictNode: RestrictNode): string[];
    visitBinary(binaryNode: BinaryNode): string[];
    visitOrIgnore(orIgnoreNode: OrIgnoreNode): string[];
}
