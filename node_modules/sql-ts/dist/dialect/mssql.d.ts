import { AlterNode, BinaryNode, CaseNode, ColumnNode, CreateNode, DropNode, FunctionCallNode, Node, OnConflictNode, OnDuplicateNode, OrderByNode, ReplaceNode, ReturningNode, SelectNode } from '../node';
import { Postgres } from './postgres';
/**
 * Config can contain:
 *
 * questionMarkParameterPlaceholder:true which will use a "?" for the parameter placeholder instead of the @index.
 *
 * @param config
 * @constructor
 */
export declare class Mssql extends Postgres {
    protected myClass: typeof Mssql;
    protected quoteCharacter: string;
    protected arrayAggFunctionName: string;
    constructor(config: {
        questionMarkParameterPlaceholder?: boolean;
    });
    _getParameterPlaceholder(index: string | number, value: any): string;
    visitReplace(replaceNode: ReplaceNode): string[];
    visitBinary(binaryNode: BinaryNode): string[];
    visitAlter(alterNode: AlterNode): string[];
    visitCase(caseNode: CaseNode): string[];
    visitColumn(columnNode: ColumnNode): string[];
    visitCreate(createNode: CreateNode): string[];
    visitDrop(dropNode: DropNode): string[];
    visitFunctionCall(functionCallNode: FunctionCallNode): string[];
    visitOrderBy(orderByNode: OrderByNode): string[];
    /**
     * We override this so that we can deal with the LIMIT and OFFSET clauses specially since they have to become
     * part of the SELECT and ORDER BY clauses.
     *
     * Basically if there's an ORDER BY clause we attach OFFSET and LIMIT to it so that it can be processed by the
     * ORDER BY handler later.
     *
     * If there's a LIMIT clause without OFFSET, we attach it to the SELECT clause so we can process it later.
     *
     * @param {Node[]} actions
     * @param {Node[]} targets
     * @param {Node[]} filters
     * @returns {String[]}
     */
    visitQueryHelper(actions: Node[], targets: Node[], filters: Node[]): string[];
    visitOnDuplicate(onDuplicateNode: OnDuplicateNode): string[];
    visitOnConflict(onConflictNode: OnConflictNode): string[];
    visitReturning(returningNode: ReturningNode): string[];
    visitSelect(selectNode: SelectNode): string[];
}
