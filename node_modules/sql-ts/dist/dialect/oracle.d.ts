/// <reference types="node" />
import { AliasNode, AlterNode, BinaryNode, CascadeNode, CaseNode, ColumnNode, CreateNode, DropIndexNode, DropNode, IndexesNode, ModifierNode, Node, OnConflictNode, ReplaceNode, RestrictNode, ReturningNode, TableNode } from '../node';
import { Postgres } from './postgres';
export declare class Oracle extends Postgres {
    protected myClass: typeof Oracle;
    protected aliasText: string;
    constructor(config: any);
    _getParameterValue(value: null | boolean | number | string | any[] | Date | Buffer | object, quoteChar?: string): string | number;
    _getParameterPlaceholder(index: string | number, value: any): string;
    visitReplace(replaceNode: ReplaceNode): string[];
    visitAlias(aliasNode: AliasNode): string[];
    visitAlter(alterNode: AlterNode): string[];
    visitTable(tableNode: TableNode): string[];
    visitCascade(cascadeNode: CascadeNode): string[];
    visitRestrict(restrictNode: RestrictNode): string[];
    visitDrop(dropNode: DropNode): string[];
    visitCreate(createNode: CreateNode): string[];
    visitBinary(binaryNode: BinaryNode): string[];
    visitModifier(modifierNode: ModifierNode): string[];
    visitQueryHelper(actions: Node[], targets: Node[], filters: Node[]): string[];
    visitColumn(columnNode: ColumnNode): string[];
    visitReturning(returningNode: ReturningNode): string[];
    visitIndexes(indexesNode: IndexesNode): string[];
    visitDropIndex(dropIndexNode: DropIndexNode): string[];
    visitCase(caseNode: CaseNode): string[];
    visitOnConflict(onConflictNode: OnConflictNode): string[];
}
