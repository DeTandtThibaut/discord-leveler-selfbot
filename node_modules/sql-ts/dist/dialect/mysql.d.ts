/// <reference types="node" />
import { BinaryNode, ColumnNode, CreateNode, ForShareNode, FunctionCallNode, IndexesNode, InsertNode, IntervalNode, OnConflictNode, OnDuplicateNode, RenameColumnNode, ReplaceNode, ReturningNode } from '../node';
import { Postgres } from './postgres';
export declare class Mysql extends Postgres {
    protected myClass: typeof Mysql;
    protected quoteCharacter: string;
    protected arrayAggFunctionName: string;
    constructor(config: any);
    _getParameterPlaceholder(index: string | number, value: any): string;
    _getParameterValue(value: null | boolean | number | string | any[] | Date | Buffer | object, quoteChar?: string): string | number;
    visitReplace(replaceNode: ReplaceNode): string[];
    visitOnDuplicate(onDuplicateNode: OnDuplicateNode): string[];
    visitOnConflict(onConflictNode: OnConflictNode): string[];
    visitReturning(returningNode: ReturningNode): string[];
    visitForShare(forShareNode: ForShareNode): string[];
    visitCreate(createNode: CreateNode): string[];
    visitRenameColumn(renameColumnNode: RenameColumnNode): string[];
    visitInsert(insertNode: InsertNode): string[];
    visitIndexes(indexesNode: IndexesNode): string[];
    visitBinary(binaryNode: BinaryNode): string[];
    visitFunctionCall(functionCallNode: FunctionCallNode): string[];
    visitColumn(columnNode: ColumnNode): string[];
    visitInterval(intervalNode: IntervalNode): string[];
}
