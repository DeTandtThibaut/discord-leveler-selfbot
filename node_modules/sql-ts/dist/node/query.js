'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const _ = require("lodash");
const sliced = require("sliced");
const _1 = require(".");
const column_1 = require("../column");
const nodeable_1 = require("../nodeable");
const table_1 = require("../table");
// get the first element of an arguments if it is an array, else return arguments as an array
const getArrayOrArgsAsArray = (args) => {
    const first = args[0];
    if (Array.isArray(first)) {
        return first;
    }
    else {
        return sliced(args);
    }
};
class Query extends _1.Node {
    constructor(table, isSubquery) {
        super(isSubquery ? 'SUBQUERY' : 'QUERY');
        this.nodes = [];
        this.table = table;
        if (table) {
            this.sql = table.sql;
        }
    }
    select(...args) {
        let select;
        if (this._select) {
            select = this._select;
        }
        else {
            select = this._select = new _1.SelectNode();
            this.add(select);
        }
        // allow things like .select(a.star(), [ a.id, a.name ])
        // this will flatten them into a single array
        const flattenedArgs = sliced(args).reduce((cur, next) => {
            if (Array.isArray(next)) {
                return cur.concat(next);
            }
            cur.push(next);
            return cur;
        }, []);
        select.addAll(flattenedArgs);
        // if this is a subquery then add reference to this column
        if (this.type === 'SUBQUERY') {
            for (const node of select.nodes) {
                const name = node.alias || node.name;
                const col = new column_1.Column(node);
                col.name = name;
                col.property = name;
                col.table = this;
                if (this[name] === undefined) {
                    this[name] = col;
                }
            }
        }
        return this;
    }
    star() {
        assert(this.type === 'SUBQUERY', 'star() can only be used on a subQuery');
        return new column_1.Column({
            star: true,
            table: this
        });
    }
    from(...nodes) {
        const sourceNodes = Array.isArray(nodes[0]) ? nodes[0] : nodes;
        for (const node of sourceNodes) {
            this.add(new _1.FromNode().add(node));
        }
        return this;
    }
    leftJoin(other) {
        assert(this.type === 'SUBQUERY', 'leftJoin() can only be used on a subQuery');
        return new _1.JoinNode('LEFT', this, other.toNode());
    }
    where(...nodes) {
        if (nodes.length > 1) {
            // allow multiple where clause arguments
            const args = sliced(nodes);
            for (const arg of args) {
                this.where(arg);
            }
            return this;
        }
        else {
            const node = nodes[0];
            // calling #where twice functions like calling #where & then #and
            if (this.whereClause) {
                return this.and(node);
            }
            this.whereClause = new _1.WhereNode(this.table);
            this.whereClause.add(node);
            return this.add(this.whereClause);
        }
    }
    or(object) {
        if (!this.whereClause) {
            return this.where(object);
        }
        this.whereClause.or(object);
        return this;
    }
    and(node) {
        if (!this.whereClause) {
            return this.where(node);
        }
        this.whereClause.and(node);
        return this;
    }
    order(...nodes) {
        const args = getArrayOrArgsAsArray(nodes);
        let orderBy;
        if (args.length === 0) {
            return this;
        }
        if (this._orderBy) {
            orderBy = this._orderBy;
        }
        else {
            orderBy = this._orderBy = new _1.OrderByNode();
            this.add(orderBy);
        }
        orderBy.addAll(args);
        return this;
    }
    group(...nodes) {
        const args = getArrayOrArgsAsArray(nodes);
        const groupBy = new _1.GroupByNode().addAll(args);
        return this.add(groupBy);
    }
    having(...nodes) {
        const args = getArrayOrArgsAsArray(nodes);
        const having = new _1.HavingNode().addAll(args);
        return this.add(having);
    }
    insert(...nodes) {
        let args = sliced(nodes);
        const object = nodes[0];
        if (Array.isArray(object)) {
            for (const col of object) {
                this.insert(col);
            }
            return this;
        }
        else if (!nodeable_1.instanceofINodeable(object) && typeof object === 'object') {
            args = [];
            Object.keys(object).forEach((key) => {
                const col = this.table.get(key);
                if (col && !col.autoGenerated) {
                    args.push(col.value(object[key]));
                }
            });
        }
        if (this.insertClause) {
            this.insertClause.add(args);
            return this;
        }
        else {
            this.insertClause = new _1.InsertNode();
            this.insertClause.add(args);
            return this.add(this.insertClause);
        }
    }
    replace(...nodes) {
        let args = sliced(nodes);
        const object = nodes[0];
        if (Array.isArray(object)) {
            for (const col of object) {
                this.replace(col);
            }
            return this;
        }
        else if (!nodeable_1.instanceofINodeable(object) && typeof object === 'object') {
            args = [];
            Object.keys(object).forEach((key) => {
                const col = this.table.get(key);
                if (col && !col.autoGenerated) {
                    args.push(col.value(object[key]));
                }
            });
        }
        if (this.replaceClause) {
            this.replaceClause.add(args);
            return this;
        }
        else {
            this.replaceClause = new _1.ReplaceNode();
            this.replaceClause.add(args);
            return this.add(this.replaceClause);
        }
    }
    update(object) {
        const update = new _1.UpdateNode();
        Object.keys(object).forEach((key) => {
            const col = this.table.get(key);
            if (col && !col.autoGenerated) {
                const val = object[key];
                update.add(col.value(_1.ParameterNode.getNodeOrParameterNode(val)));
            }
        });
        return this.add(update);
    }
    parameter(v) {
        const param = _1.ParameterNode.getNodeOrParameterNode(v);
        param.isExplicit = true;
        return this.add(param);
    }
    delete(params) {
        let result;
        if (params) {
            if (params instanceof table_1.Table || Array.isArray(params)) {
                // handle explicit delete queries:
                // e.g. post.delete(post).from(post) -> DELETE post FROM post
                // e.g. post.delete([post, user]).from(post) -> DELETE post, user FROM post
                const newParams = Array.isArray(params) ? params.map((table) => new _1.TableNode(table)) : [new _1.TableNode(params)];
                result = this.add(new _1.DeleteNode().addAll(newParams));
            }
            else {
                // syntax sugar for post.delete().from(post).where(params)
                result = this.add(new _1.DeleteNode()).where(params);
            }
        }
        else {
            result = this.add(new _1.DeleteNode());
        }
        return result;
    }
    returning(...args) {
        const returning = new _1.ReturningNode();
        if (args.length === 0) {
            returning.add('*');
        }
        else {
            returning.addAll(getArrayOrArgsAsArray(args));
        }
        return this.add(returning);
    }
    onDuplicate(object) {
        const onDuplicate = new _1.OnDuplicateNode();
        Object.keys(object).forEach((key) => {
            const col = this.table.get(key);
            let val;
            if (col && !col.autoGenerated) {
                val = object[key];
            }
            onDuplicate.add(col.value(_1.ParameterNode.getNodeOrParameterNode(val)));
        });
        return this.add(onDuplicate);
    }
    onConflict(options) {
        const onConflict = new _1.OnConflictNode(options);
        return this.add(onConflict);
    }
    forUpdate() {
        assert(typeof this._select !== 'undefined', 'FOR UPDATE can be used only in a select statement');
        this.add(new _1.ForUpdateNode());
        return this;
    }
    forShare() {
        assert(typeof this._select !== 'undefined', 'FOR SHARE can be used only in a select statement');
        return this.add(new _1.ForShareNode());
    }
    create(indexName) {
        if (this.indexesClause) {
            const createIndex = new _1.CreateIndexNode(this.table, indexName);
            this.add(createIndex);
            return createIndex;
        }
        else {
            return this.add(new _1.CreateNode(this.table.isTemporary));
        }
    }
    drop() {
        if (this.indexesClause) {
            const args = sliced(arguments);
            const dropIndex = new _1.DropIndexNode(this.table, args);
            this.add(dropIndex);
            return dropIndex;
        }
        else {
            return this.add(new _1.DropNode(this.table));
        }
    }
    truncate() {
        return this.add(new _1.TruncateNode(this.table));
    }
    distinct() {
        return this.add(new _1.DistinctNode());
    }
    distinctOn(...args) {
        let distinctOn;
        if (this._distinctOn) {
            distinctOn = this._distinctOn;
        }
        else {
            const select = this.nodes.filter((node) => node.type === 'SELECT').shift();
            distinctOn = this._distinctOn = new _1.DistinctOnNode();
            select.add(distinctOn);
        }
        // allow things like .distinctOn(a.star(), [ a.id, a.name ])
        // this will flatten them into a single array
        const flattenedArgs = sliced(args).reduce((cur, next) => {
            if (Array.isArray(next)) {
                return cur.concat(next);
            }
            cur.push(next);
            return cur;
        }, []);
        distinctOn.addAll(flattenedArgs);
        return this;
    }
    alter() {
        return this.add(new _1.AlterNode());
    }
    rename(newName) {
        const renameClause = new _1.RenameNode();
        if (typeof newName === 'string') {
            newName = new column_1.Column({
                name: newName,
                table: this.table
            });
        }
        renameClause.add(newName.toNode());
        this.nodes[0].add(renameClause);
        return this;
    }
    addColumn(column, dataType) {
        const addClause = new _1.AddColumnNode();
        if (typeof column === 'string') {
            column = new column_1.Column({
                name: column,
                table: this.table
            });
        }
        if (dataType) {
            column.dataType = dataType;
        }
        addClause.add(column.toNode());
        this.nodes[0].add(addClause);
        return this;
    }
    dropColumn(column) {
        const dropClause = new _1.DropColumnNode();
        if (typeof column === 'string') {
            column = new column_1.Column({
                name: column,
                table: this.table
            });
        }
        dropClause.add(column.toNode());
        this.nodes[0].add(dropClause);
        return this;
    }
    renameColumn(oldColumn, newColumn) {
        const renameClause = new _1.RenameColumnNode();
        if (typeof oldColumn === 'string') {
            oldColumn = new column_1.Column({
                name: oldColumn,
                table: this.table
            });
        }
        if (typeof newColumn === 'string') {
            newColumn = new column_1.Column({
                name: newColumn,
                table: this.table
            });
        }
        renameClause.add(oldColumn.toNode());
        renameClause.add(newColumn.toNode());
        this.nodes[0].add(renameClause);
        return this;
    }
    limit(count) {
        return this.add(new _1.ModifierNode(this, 'LIMIT', count));
    }
    offset(count) {
        return this.add(new _1.ModifierNode(this, 'OFFSET', count));
    }
    exists() {
        assert(this.type === 'SUBQUERY', 'exists() can only be used on a subQuery');
        return new _1.PrefixUnaryNode({
            left: this,
            operator: 'EXISTS'
        });
    }
    notExists() {
        assert(this.type === 'SUBQUERY', 'notExists() can only be used on a subQuery');
        return new _1.PrefixUnaryNode({
            left: this,
            operator: 'NOT EXISTS'
        });
    }
    ifExists() {
        this.nodes[0].unshift(new _1.IfExistsNode());
        return this;
    }
    ifNotExists() {
        this.nodes[0].unshift(new _1.IfNotExistsNode());
        return this;
    }
    orIgnore() {
        this.nodes[0].unshift(new _1.OrIgnoreNode());
        return this;
    }
    cascade() {
        this.nodes[0].add(new _1.CascadeNode());
        return this;
    }
    restrict() {
        this.nodes[0].add(new _1.RestrictNode());
        return this;
    }
    indexes() {
        this.indexesClause = new _1.IndexesNode(this.table);
        return this.add(this.indexesClause);
    }
    createView(viewName) {
        this.add(new _1.CreateViewNode(viewName));
        return this;
    }
}
exports.Query = Query;
// Here we are extending query with valueExpressions so that it's possible to write queries like
//   const query=sql.select(a.select(a.x.sum()).plus(b.select(b.y.sum()))
// which generates:
//   SELECT (SELECT SUM(a.x) FROM a) + (SELECT SUM(b.y) FROM b)
// We need to remove "or" and "and" from here because it conflicts with the already existing functionality of appending
// to the where clause like so:
//   const query=a.select().where(a.name.equals("joe")).or(a.name.equals("sam"))
const valueExpressions = _1.valueExpressionMixin();
delete valueExpressions.or;
delete valueExpressions.and;
_.extend(Query.prototype, valueExpressions);
// Extend the query with the aliasMixin so that it's possible to write queries like
//   const query=sql.select(a.select(a.count()).as("column1"))
// which generates:
//   SELECT (SELECT COUNT(*) FROM a) AS "column1"
_.extend(Query.prototype, _1.AliasNode.AliasMixin);
//# sourceMappingURL=query.js.map