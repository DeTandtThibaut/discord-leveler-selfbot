import { Column } from './column';
import { SQLDialects, TableDefinition } from './configTypes';
import { ArrayCallNode, FunctionCallNode, IntervalNode, Query } from './node';
import { Table, TableWithColumns } from './table';
declare class Sql {
    functions: {
        [key: string]: (...args: any[]) => FunctionCallNode;
    };
    dialect: any;
    dialectName: SQLDialects;
    config: any;
    private _function;
    constructor(dialect?: SQLDialects, config?: any);
    function(functionNames: string[]): {
        [key: string]: (...args: any[]) => FunctionCallNode;
    };
    function(functionName: string): (...args: any[]) => FunctionCallNode;
    define<T>(def: TableDefinition): TableWithColumns<T>;
    array(...args: any[]): ArrayCallNode;
    select(...args: any[]): Query<{}>;
    interval(...args: any[]): IntervalNode;
    setDialect(dialect: SQLDialects, config?: any): this;
    constant(value: any): Column<{}>;
}
export { Sql, Table };
