import { ColumnNode, IValueExpressionMixin, OrderByValueNode } from './node';
import { INodeable } from './nodeable';
import { Table } from './table';
interface ColumnConfig {
    name?: string;
    property?: string;
    autoGenerated?: boolean;
    jsType?: any;
    dataType?: string;
    primaryKey?: boolean;
    references?: string | {
        table?: string;
        column?: string;
        constraint?: string;
        onDelete?: 'restrict' | 'cascade' | 'no action' | 'set null' | 'set default';
        onUpdate?: 'restrict' | 'cascade' | 'no action' | 'set null' | 'set default';
    };
    notNull?: boolean;
    unique?: boolean;
    defaultValue?: any;
    subfields?: string[];
    table?: Table<any>;
    star?: boolean;
    subfieldContainer?: Column<any>;
    isConstant?: boolean;
    constantValue?: any;
}
export declare class Column<T> implements INodeable {
    name: string;
    property?: string;
    table?: Table<any>;
    asc: this;
    alias?: string;
    desc: OrderByValueNode;
    dataType?: string;
    _value: any;
    star?: boolean;
    subfields: {
        [key: string]: Column<any>;
    };
    asArray?: boolean;
    aggregator?: string;
    isConstant?: boolean;
    constantValue?: any;
    primaryKey?: boolean;
    notNull?: boolean;
    defaultValue?: any;
    references?: string | {
        table?: string;
        column?: string;
        constraint?: string;
        onDelete?: 'restrict' | 'cascade' | 'no action' | 'set null' | 'set default';
        onUpdate?: 'restrict' | 'cascade' | 'no action' | 'set null' | 'set default';
    };
    subfieldContainer?: Column<any>;
    autoGenerated?: boolean;
    unique?: boolean;
    isDistinct?: boolean;
    constructor(config: ColumnConfig);
    value(value: any): Column<T>;
    getValue(): any;
    toNode(): ColumnNode;
    as(alias: string): ColumnNode;
    arrayAgg(alias?: string): ColumnNode;
    aggregate(alias: string | undefined, aggregator: string): ColumnNode;
    count(alias?: string): ColumnNode;
    min(alias?: string): ColumnNode;
    max(alias?: string): ColumnNode;
    sum(alias?: string): ColumnNode;
    avg(alias?: string): ColumnNode;
    distinct(): ColumnNode;
    toQuery(): {
        text: string;
        values: string[];
    };
}
export interface Column<T> extends IValueExpressionMixin {
}
export {};
